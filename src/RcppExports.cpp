// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// exp_gradient
arma::vec exp_gradient(arma::vec pp, double Tmax, arma::vec pars);
RcppExport SEXP _bootha_exp_gradient(SEXP ppSEXP, SEXP TmaxSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< double >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_gradient(pp, Tmax, pars));
    return rcpp_result_gen;
END_RCPP
}
// exp_hessian
arma::mat exp_hessian(arma::vec pp, double Tmax, arma::vec pars);
RcppExport SEXP _bootha_exp_hessian(SEXP ppSEXP, SEXP TmaxSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< double >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_hessian(pp, Tmax, pars));
    return rcpp_result_gen;
END_RCPP
}
// fib
arma::vec fib(arma::mat L, arma::vec v, bool flat);
RcppExport SEXP _bootha_fib(SEXP LSEXP, SEXP vSEXP, SEXP flatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type flat(flatSEXP);
    rcpp_result_gen = Rcpp::wrap(fib(L, v, flat));
    return rcpp_result_gen;
END_RCPP
}
// exp_fib
arma::vec exp_fib(arma::mat L, arma::vec v, arma::vec pars, arma::vec pp, bool flat);
RcppExport SEXP _bootha_exp_fib(SEXP LSEXP, SEXP vSEXP, SEXP parsSEXP, SEXP ppSEXP, SEXP flatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< bool >::type flat(flatSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_fib(L, v, pars, pp, flat));
    return rcpp_result_gen;
END_RCPP
}
// intensity
arma::vec intensity(arma::vec x, arma::vec pp, arma::vec pars);
RcppExport SEXP _bootha_intensity(SEXP xSEXP, SEXP ppSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(intensity(x, pp, pars));
    return rcpp_result_gen;
END_RCPP
}
// integrated_intensity
arma::vec integrated_intensity(arma::vec x, arma::vec pp, arma::vec pars);
RcppExport SEXP _bootha_integrated_intensity(SEXP xSEXP, SEXP ppSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(integrated_intensity(x, pp, pars));
    return rcpp_result_gen;
END_RCPP
}
// interpol
arma::vec interpol(arma::mat f, Rcpp::Nullable<NumericVector> x, Rcpp::Nullable<NumericVector> y, bool flat);
RcppExport SEXP _bootha_interpol(SEXP fSEXP, SEXP xSEXP, SEXP ySEXP, SEXP flatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type flat(flatSEXP);
    rcpp_result_gen = Rcpp::wrap(interpol(f, x, y, flat));
    return rcpp_result_gen;
END_RCPP
}
// log_lik
double log_lik(arma::vec pp, double Tmax, arma::vec pars, double dt);
RcppExport SEXP _bootha_log_lik(SEXP ppSEXP, SEXP TmaxSEXP, SEXP parsSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< double >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(log_lik(pp, Tmax, pars, dt));
    return rcpp_result_gen;
END_RCPP
}
// rib
arma::vec rib(arma::vec pars, arma::vec v, double dt, bool flat);
RcppExport SEXP _bootha_rib(SEXP parsSEXP, SEXP vSEXP, SEXP dtSEXP, SEXP flatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< bool >::type flat(flatSEXP);
    rcpp_result_gen = Rcpp::wrap(rib(pars, v, dt, flat));
    return rcpp_result_gen;
END_RCPP
}
// exp_rib
arma::vec exp_rib(arma::vec pars, arma::vec v);
RcppExport SEXP _bootha_exp_rib(SEXP parsSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_rib(pars, v));
    return rcpp_result_gen;
END_RCPP
}
// testfun
arma::vec testfun(arma::vec x);
RcppExport SEXP _bootha_testfun(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(testfun(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bootha_exp_gradient", (DL_FUNC) &_bootha_exp_gradient, 3},
    {"_bootha_exp_hessian", (DL_FUNC) &_bootha_exp_hessian, 3},
    {"_bootha_fib", (DL_FUNC) &_bootha_fib, 3},
    {"_bootha_exp_fib", (DL_FUNC) &_bootha_exp_fib, 5},
    {"_bootha_intensity", (DL_FUNC) &_bootha_intensity, 3},
    {"_bootha_integrated_intensity", (DL_FUNC) &_bootha_integrated_intensity, 3},
    {"_bootha_interpol", (DL_FUNC) &_bootha_interpol, 4},
    {"_bootha_log_lik", (DL_FUNC) &_bootha_log_lik, 4},
    {"_bootha_rib", (DL_FUNC) &_bootha_rib, 4},
    {"_bootha_exp_rib", (DL_FUNC) &_bootha_exp_rib, 2},
    {"_bootha_testfun", (DL_FUNC) &_bootha_testfun, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bootha(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
