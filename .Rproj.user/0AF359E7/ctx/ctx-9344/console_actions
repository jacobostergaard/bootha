{
    "type": [
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2
    ],
    "data": [
        "\nR version 4.0.2 (2020-06-22) -- \"Taking Off Again\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin17.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(bootha)",
        "Loading required package: Rcpp\n",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B,'fib',parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()))",
        "\nBegin at: 2020-12-03 12:22:52",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "Error in get(name, envir = envir) : object 'parametric' not found\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(bootha)",
        "> ",
        "library(bootha)",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B,'fib',parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()))",
        "\nBegin at: 2020-12-03 12:23:43",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "> ",
        "library(bootha)",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B,'fib',parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()))",
        "\nBegin at: 2020-12-03 12:23:55",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "> ",
        "cat(paste0(\"\\nPar fib done at: \", Sys.time()))",
        "\nPar fib done at: 2020-12-03 12:23:59",
        "> ",
        "boot[[2]] = booter(B, 'fib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric fib done!\")",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()))",
        "\nNon-par fib done at: 2020-12-03 12:24:03",
        "> ",
        "boot[[3]] = booter(B, 'rib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric rib done!\")",
        "> ",
        "cat(paste0(\"\\nPar rib done at: \", Sys.time()))",
        "\nPar rib done at: 2020-12-03 12:24:07",
        "> ",
        "boot[[4]] = booter(B, 'rib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric rib done!\")",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()))",
        "\nNon-par fib done at: 2020-12-03 12:24:11",
        "> ",
        "",
        "> ",
        "names(boot) = c(\"par_fib\",\"npar_fib\",\"par_rib\",\"npar_rib\")",
        "> ",
        "",
        "> ",
        "boot_par_ci <- function(boot_in){",
        "+ ",
        "  tmp = t(rbind(apply(boot_in,2,mean),apply(boot_in,2,mean)-1.96*apply(boot_in,2,sd),apply(boot_in,2,mean)+1.96*apply(boot_in,2,sd)))",
        "+ ",
        "  colnames(tmp) = c(\"est\",\"ci.lo\",\"ci.hi\")",
        "+ ",
        "  return(tmp)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "pars",
        "[1] 0.018 0.740 0.021\n",
        "> ",
        "boot_par_ci(boot$par_fib)",
        "          est       ci.lo      ci.hi\nmu 0.01962633 0.013560293 0.02569238\nn  0.72205807 0.632350562 0.81176559\nB  0.01440771 0.006985371 0.02183004\n",
        "> ",
        "boot_par_ci(boot$npar_fib)",
        "          est       ci.lo      ci.hi\nmu 0.02032761 0.014248538 0.02640669\nn  0.73484117 0.651785183 0.81789715\nB  0.01575505 0.008024224 0.02348588\n",
        "> ",
        "boot_par_ci(boot$par_rib)",
        "          est       ci.lo      ci.hi\nmu 0.01950476 0.013489294 0.02552022\nn  0.72438581 0.635023824 0.81374779\nB  0.01467202 0.007722454 0.02162158\n",
        "> ",
        "boot_par_ci(boot$npar_rib)",
        "          est       ci.lo      ci.hi\nmu 0.02047792 0.014595876 0.02635997\nn  0.73099783 0.648652746 0.81334291\nB  0.01579010 0.008007492 0.02357270\n",
        "> ",
        "library(bootha)",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B, type, parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()))",
        "\nBegin at: 2020-12-03 12:25:01",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "> ",
        "cat(paste0(\"\\nPar fib done at: \", Sys.time()))",
        "\nPar fib done at: 2020-12-03 12:25:05",
        "> ",
        "boot[[2]] = booter(B, 'fib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric fib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()))",
        "\nNon-par fib done at: 2020-12-03 12:25:08",
        "> ",
        "boot[[3]] = booter(B, 'rib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric rib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nPar rib done at: \", Sys.time()))",
        "\nPar rib done at: 2020-12-03 12:25:09",
        "> ",
        "boot[[4]] = booter(B, 'rib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric rib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()))",
        "\nNon-par fib done at: 2020-12-03 12:25:10",
        "> ",
        "",
        "> ",
        "names(boot) = c(\"par_fib\",\"npar_fib\",\"par_rib\",\"npar_rib\")",
        "Error in names(boot) = c(\"par_fib\", \"npar_fib\", \"par_rib\", \"npar_rib\") : \n  'names' attribute [4] must be the same length as the vector [1]\n",
        "> ",
        "",
        "> ",
        "boot_par_ci <- function(boot_in){",
        "+ ",
        "  tmp = t(rbind(apply(boot_in,2,mean),apply(boot_in,2,mean)-1.96*apply(boot_in,2,sd),apply(boot_in,2,mean)+1.96*apply(boot_in,2,sd)))",
        "+ ",
        "  colnames(tmp) = c(\"est\",\"ci.lo\",\"ci.hi\")",
        "+ ",
        "  return(tmp)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "pars",
        "[1] 0.018 0.740 0.021\n",
        "> ",
        "boot_par_ci(boot$par_fib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$npar_fib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$par_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$npar_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "library(bootha)",
        "Warning messages:\n",
        "1: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 27 (<-localhost:11972)\n",
        "2: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 26 (<-localhost:11972)\n",
        "3: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 25 (<-localhost:11972)\n",
        "4: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 24 (<-localhost:11972)\n",
        "5: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 23 (<-localhost:11972)\n",
        "6: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 22 (<-localhost:11972)\n",
        "7: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 21 (<-localhost:11972)\n",
        "8: ",
        "In for (i in seq_along(`_node`)) .rs.recursiveWalk(`_node`[[i]],  :",
        "\n ",
        " closing unused connection 20 (<-localhost:11972)\n",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B, type, parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()),\"\\n\")",
        "\nBegin at: 2020-12-03 12:25:31 \n",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "There were 16 warnings (use warnings() to see them)",
        "\n",
        "> ",
        "cat(paste0(\"\\nPar fib done at: \", Sys.time()),\"\\n\")",
        "\nPar fib done at: 2020-12-03 12:25:43 \n",
        "> ",
        "boot[[2]] = booter(B, 'fib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric fib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()),\"\\n\")",
        "\nNon-par fib done at: 2020-12-03 12:25:45 \n",
        "> ",
        "boot[[3]] = booter(B, 'rib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric rib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nPar rib done at: \", Sys.time()),\"\\n\")",
        "\nPar rib done at: 2020-12-03 12:25:46 \n",
        "> ",
        "boot[[4]] = booter(B, 'rib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric rib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()))",
        "\nNon-par fib done at: 2020-12-03 12:25:47",
        "> ",
        "",
        "> ",
        "names(boot) = c(\"par_fib\",\"npar_fib\",\"par_rib\",\"npar_rib\")",
        "Error in names(boot) = c(\"par_fib\", \"npar_fib\", \"par_rib\", \"npar_rib\") : \n  'names' attribute [4] must be the same length as the vector [1]\n",
        "> ",
        "",
        "> ",
        "boot_par_ci <- function(boot_in){",
        "+ ",
        "  tmp = t(rbind(apply(boot_in,2,mean),apply(boot_in,2,mean)-1.96*apply(boot_in,2,sd),apply(boot_in,2,mean)+1.96*apply(boot_in,2,sd)))",
        "+ ",
        "  colnames(tmp) = c(\"est\",\"ci.lo\",\"ci.hi\")",
        "\n",
        "+ ",
        "  return(tmp)",
        "Execution halted\n",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "pars",
        "[1] 0.018 0.740 0.021\n",
        "> ",
        "boot_par_ci(boot$par_fib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "\n",
        "Execution halted\n",
        "> ",
        "boot_par_ci(boot$npar_fib)",
        "\n",
        "Execution halted\n",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$par_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$npar_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "> ",
        "warnings()",
        "Warning messages:\n1: closing unused connection 19 (<-localhost:11972)\n2: closing unused connection 18 (<-localhost:11972)\n3: closing unused connection 17 (<-localhost:11972)\n4: closing unused connection 16 (<-localhost:11972)\n5: closing unused connection 15 (<-localhost:11972)\n6: closing unused connection 14 (<-localhost:11972)\n7: closing unused connection 13 (<-localhost:11972)\n8: closing unused connection 12 (<-localhost:11972)\n9: closing unused connection 11 (<-localhost:11972)\n10: closing unused connection 10 (<-localhost:11972)",
        "\n11: closing unused connection 9 (<-localhost:11972)\n12: closing unused connection 8 (<-localhost:11972)\n13: closing unused connection 7 (<-localhost:11972)\n14: closing unused connection 6 (<-localhost:11972)\n15: closing unused connection 5 (<-localhost:11972)\n16: closing unused connection 4 (<-localhost:11972)\n\nRestarting R session...\n\n"
    ]
}