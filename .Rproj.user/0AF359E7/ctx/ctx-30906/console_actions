{
    "type": [
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.0.2 (2020-06-22) -- \"Taking Off Again\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin17.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(bootha)",
        "Loading required package: Rcpp\n",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B, type, parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()),\"\\n\")",
        "\nBegin at: 2020-12-03 12:26:52 \n",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "> ",
        "library(bootha)",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B, type, parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()),\"\\n\")",
        "\nBegin at: 2020-12-03 12:27:11 \n",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "> ",
        "cat(paste0(\"\\nPar fib done at: \", Sys.time()),\"\\n\")",
        "\nPar fib done at: 2020-12-03 12:27:22 \n",
        "> ",
        "boot[[2]] = booter(B, 'fib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric fib done!\")",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()),\"\\n\")",
        "\nNon-par fib done at: 2020-12-03 12:27:33 \n",
        "> ",
        "boot[[3]] = booter(B, 'rib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric rib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nPar rib done at: \", Sys.time()),\"\\n\")",
        "\nPar rib done at: 2020-12-03 12:27:44 \n",
        "> ",
        "boot[[4]] = booter(B, 'rib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric rib done!\")",
        "\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "\n",
        "Execution halted\n",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()))",
        "\nNon-par fib done at: 2020-12-03 12:27:45",
        "> ",
        "",
        "> ",
        "names(boot) = c(\"par_fib\",\"npar_fib\",\"par_rib\",\"npar_rib\")",
        "Error in names(boot) = c(\"par_fib\", \"npar_fib\", \"par_rib\", \"npar_rib\") : \n  'names' attribute [4] must be the same length as the vector [2]\n",
        "> ",
        "",
        "> ",
        "boot_par_ci <- function(boot_in){",
        "+ ",
        "  tmp = t(rbind(apply(boot_in,2,mean),apply(boot_in,2,mean)-1.96*apply(boot_in,2,sd),apply(boot_in,2,mean)+1.96*apply(boot_in,2,sd)))",
        "+ ",
        "  colnames(tmp) = c(\"est\",\"ci.lo\",\"ci.hi\")",
        "+ ",
        "  return(tmp)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "pars",
        "[1] 0.018 0.740 0.021\n",
        "> ",
        "boot_par_ci(boot$par_fib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$npar_fib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$par_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "\n",
        "Execution halted\n",
        "> ",
        "boot_par_ci(boot$npar_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "library(bootha)",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B, type, parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "cat(paste0(\"\\nBegin at: \", Sys.time()),\"\\n\")",
        "\nBegin at: 2020-12-03 12:27:55 \n",
        "> ",
        "boot[[1]] = booter(B, 'fib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric fib done!\")",
        "Warning messages:\n",
        "1: closing unused connection 11 (<-localhost:11976) \n",
        "2: closing unused connection 10 (<-localhost:11976) \n",
        "3: closing unused connection 9 (<-localhost:11976) \n",
        "4: closing unused connection 8 (<-localhost:11976) \n",
        "5: closing unused connection 7 (<-localhost:11976) \n",
        "6: closing unused connection 6 (<-localhost:11976) \n",
        "7: closing unused connection 5 (<-localhost:11976) \n",
        "8: closing unused connection 4 (<-localhost:11976) \n",
        "> ",
        "cat(paste0(\"\\nPar fib done at: \", Sys.time()),\"\\n\")",
        "\nPar fib done at: 2020-12-03 12:28:12 \n",
        "> ",
        "boot[[2]] = booter(B, 'fib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric fib done!\")",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()),\"\\n\")",
        "\nNon-par fib done at: 2020-12-03 12:28:27 \n",
        "> ",
        "boot[[3]] = booter(B, 'rib', parametric=TRUE); save(boot,file=fn); notify(\"Parameteric rib done!\")",
        "> ",
        "cat(paste0(\"\\nPar rib done at: \", Sys.time()),\"\\n\")",
        "\nPar rib done at: 2020-12-03 14:38:45 \n",
        "> ",
        "boot[[4]] = booter(B, 'rib', parametric=FALSE); save(boot,file=fn); notify(\"Non-parameteric rib done!\")",
        "\n",
        "> ",
        "cat(paste0(\"\\nNon-par fib done at: \", Sys.time()))",
        "\nNon-par fib done at: 2020-12-03 14:43:26",
        "> ",
        "",
        "> ",
        "names(boot) = c(\"par_fib\",\"npar_fib\",\"par_rib\",\"npar_rib\")",
        "Error in names(boot) = c(\"par_fib\", \"npar_fib\", \"par_rib\", \"npar_rib\") : \n  'names' attribute [4] must be the same length as the vector [3]\n",
        "> ",
        "",
        "> ",
        "boot_par_ci <- function(boot_in){",
        "+ ",
        "  tmp = t(rbind(apply(boot_in,2,mean),apply(boot_in,2,mean)-1.96*apply(boot_in,2,sd),apply(boot_in,2,mean)+1.96*apply(boot_in,2,sd)))",
        "+ ",
        "  colnames(tmp) = c(\"est\",\"ci.lo\",\"ci.hi\")",
        "+ ",
        "  return(tmp)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "pars",
        "[1] 0.018 0.740 0.021\n",
        "> ",
        "boot_par_ci(boot$par_fib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$npar_fib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$par_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "boot_par_ci(boot$npar_rib)",
        "Error in apply(boot_in, 2, mean) : dim(X) must have a positive length\n",
        "> ",
        "",
        "Warning messages:\n",
        "1: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 11 (<-localhost:11976)\n",
        "2: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 10 (<-localhost:11976)\n",
        "3: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 9 (<-localhost:11976)\n",
        "4: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 8 (<-localhost:11976)\n",
        "5: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 7 (<-localhost:11976)\n",
        "6: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 6 (<-localhost:11976)\n",
        "7: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 5 (<-localhost:11976)\n",
        "8: ",
        "In for (item in tmp) if (item$visible) print(item$value) :",
        "\n ",
        " closing unused connection 4 (<-localhost:11976)\n",
        "> ",
        "",
        "> ",
        "pl <- function(x,b){",
        "+ ",
        "  x^(-1-b)",
        "+ ",
        "}",
        "> ",
        "x = seq(0,10,.01)",
        "> ",
        "pl(x, .5)",
        "   [1]          Inf 1.000000e+03 3.535534e+02 1.924501e+02 1.250000e+02 8.944272e+01 6.804138e+01 5.399492e+01 4.419417e+01\n  [10] 3.703704e+01 3.162278e+01 2.741012e+01 2.405626e+01 2.133462e+01 1.909009e+01 1.721326e+01 1.562500e+01 1.426680e+01\n  [19] 1.309457e+01 1.207451e+01 1.118034e+01 1.039133e+01 9.690942e+00 9.065844e+00 8.505173e+00 8.000000e+00 7.542928e+00\n  [28] 7.127781e+00 6.749366e+00 6.403288e+00 6.085806e+00 5.793719e+00 5.524272e+00 5.275080e+00 5.044076e+00 4.829453e+00\n  [37] 4.629630e+00",
        " 4.443216e+00 4.268985e+00 4.105850e+00 3.952847e+00 3.809116e+00 3.673889e+00 3.546478e+00 3.426265e+00\n  [46] 3.312693e+00 3.205260e+00 3.103510e+00 3.007033e+00 2.915452e+00 2.828427e+00 2.745647e+00 2.666828e+00 2.591709e+00\n  [55] 2.520051e+00 2.451636e+00 2.386261e+00 2.323741e+00 2.263904e+00 2.206592e+00 2.151657e+00 2.098965e+00 2.048389e+00\n  [64] 1.999812e+00 1.953125e+00 1.908227e+00 1.865023e+00 1.823425e+00 1.783350e+00 1.744723e+00 1.707469e+00 1.671523e+00\n  [73] 1.636821e+00 1.603303e+00 1.570914e+00",
        " 1.539601e+00 1.509314e+00 1.480007e+00 1.451637e+00 1.424162e+00 1.397542e+00\n  [82] 1.371742e+00 1.346726e+00 1.322461e+00 1.298916e+00 1.276062e+00 1.253869e+00 1.232313e+00 1.211368e+00 1.191009e+00\n  [91] 1.171214e+00 1.151961e+00 1.133231e+00 1.115002e+00 1.097257e+00 1.079977e+00 1.063147e+00 1.046749e+00 1.030768e+00\n [100] 1.015190e+00 1.000000e+00 9.851853e-01 9.707329e-01 9.566304e-01 9.428660e-01 9.294286e-01 9.163074e-01 9.034920e-01\n [109] 8.909726e-01 8.787397e-01 8.667842e-01 8.550973e-01 8.436707e-01",
        " 8.324963e-01 8.215665e-01 8.108737e-01 8.004109e-01\n [118] 7.901712e-01 7.801480e-01 7.703349e-01 7.607258e-01 7.513148e-01 7.420963e-01 7.330647e-01 7.242149e-01 7.155418e-01\n [127] 7.070403e-01 6.987059e-01 6.905340e-01 6.825201e-01 6.746600e-01 6.669497e-01 6.593851e-01 6.519624e-01 6.446779e-01\n [136] 6.375281e-01 6.305095e-01 6.236187e-01 6.168526e-01 6.102079e-01 6.036816e-01 5.972709e-01 5.909728e-01 5.847846e-01\n [145] 5.787037e-01 5.727274e-01 5.668533e-01 5.610790e-01 5.554020e-01 5.498201e-01 5.443311e-01",
        " 5.389328e-01 5.336231e-01\n [154] 5.284001e-01 5.232617e-01 5.182060e-01 5.132313e-01 5.083356e-01 5.035173e-01 4.987746e-01 4.941059e-01 4.895096e-01\n [163] 4.849841e-01 4.805279e-01 4.761395e-01 4.718175e-01 4.675606e-01 4.633672e-01 4.592362e-01 4.551661e-01 4.511559e-01\n [172] 4.472042e-01 4.433098e-01 4.394716e-01 4.356885e-01 4.319594e-01 4.282832e-01 4.246588e-01 4.210852e-01 4.175615e-01\n [181] 4.140867e-01 4.106597e-01 4.072798e-01 4.039460e-01 4.006575e-01 3.974133e-01 3.942127e-01 3.910548e-01 3.879388e-01",
        "\n [190] 3.848640e-01 3.818296e-01 3.788349e-01 3.758791e-01 3.729615e-01 3.700815e-01 3.672384e-01 3.644315e-01 3.616602e-01\n [199] 3.589238e-01 3.562217e-01 3.535534e-01 3.509182e-01 3.483156e-01 3.457450e-01 3.432059e-01 3.406977e-01 3.382199e-01\n [208] 3.357720e-01 3.333535e-01 3.309639e-01 3.286026e-01 3.262694e-01 3.239636e-01 3.216848e-01 3.194327e-01 3.172067e-01\n [217] 3.150064e-01 3.128314e-01 3.106814e-01 3.085559e-01 3.064545e-01 3.043768e-01 3.023225e-01 3.002913e-01 2.982826e-01\n [226] 2.962963e-01",
        " 2.943319e-01 2.923891e-01 2.904676e-01 2.885671e-01 2.866872e-01 2.848276e-01 2.829880e-01 2.811681e-01\n [235] 2.793677e-01 2.775864e-01 2.758240e-01 2.740801e-01 2.723545e-01 2.706470e-01 2.689572e-01 2.672849e-01 2.656299e-01\n [244] 2.639919e-01 2.623707e-01 2.607659e-01 2.591775e-01 2.576052e-01 2.560486e-01 2.545077e-01 2.529822e-01 2.514719e-01\n [253] 2.499765e-01 2.484959e-01 2.470298e-01 2.455782e-01 2.441406e-01 2.427171e-01 2.413073e-01 2.399111e-01 2.385283e-01\n [262] 2.371588e-01 2.358023e-01 2.344587e-01",
        " 2.331278e-01 2.318095e-01 2.305035e-01 2.292098e-01 2.279281e-01 2.266583e-01\n [271] 2.254002e-01 2.241538e-01 2.229188e-01 2.216951e-01 2.204825e-01 2.192810e-01 2.180903e-01 2.169104e-01 2.157411e-01\n [280] 2.145822e-01 2.134337e-01 2.122954e-01 2.111671e-01 2.100489e-01 2.089404e-01 2.078417e-01 2.067526e-01 2.056729e-01\n [289] 2.046027e-01 2.035416e-01 2.024897e-01 2.014469e-01 2.004129e-01 1.993878e-01 1.983714e-01 1.973636e-01 1.963643e-01\n [298] 1.953734e-01 1.943908e-01 1.934164e-01 1.924501e-01 1.914918e-01",
        " 1.905415e-01 1.895990e-01 1.886643e-01 1.877372e-01\n [307] 1.868176e-01 1.859056e-01 1.850009e-01 1.841036e-01 1.832135e-01 1.823305e-01 1.814547e-01 1.805858e-01 1.797238e-01\n [316] 1.788686e-01 1.780202e-01 1.771785e-01 1.763434e-01 1.755149e-01 1.746928e-01 1.738771e-01 1.730678e-01 1.722647e-01\n [325] 1.714678e-01 1.706770e-01 1.698923e-01 1.691135e-01 1.683407e-01 1.675738e-01 1.668127e-01 1.660573e-01 1.653076e-01\n [334] 1.645636e-01 1.638250e-01 1.630920e-01 1.623645e-01 1.616423e-01 1.609255e-01 1.602140e-01",
        " 1.595077e-01 1.588066e-01\n [343] 1.581105e-01 1.574196e-01 1.567337e-01 1.560527e-01 1.553767e-01 1.547055e-01 1.540392e-01 1.533776e-01 1.527207e-01\n [352] 1.520685e-01 1.514210e-01 1.507780e-01 1.501395e-01 1.495056e-01 1.488761e-01 1.482510e-01 1.476303e-01 1.470139e-01\n [361] 1.464017e-01 1.457938e-01 1.451901e-01 1.445906e-01 1.439952e-01 1.434038e-01 1.428165e-01 1.422332e-01 1.416538e-01\n [370] 1.410784e-01 1.405068e-01 1.399391e-01 1.393752e-01 1.388151e-01 1.382587e-01 1.377061e-01 1.371571e-01 1.366117e-01",
        "\n [379] 1.360700e-01 1.355318e-01 1.349972e-01 1.344660e-01 1.339384e-01 1.334141e-01 1.328933e-01 1.323759e-01 1.318618e-01\n [388] 1.313511e-01 1.308436e-01 1.303394e-01 1.298384e-01 1.293406e-01 1.288460e-01 1.283545e-01 1.278662e-01 1.273809e-01\n [397] 1.268987e-01 1.264195e-01 1.259434e-01 1.254702e-01 1.250000e-01 1.245327e-01 1.240683e-01 1.236068e-01 1.231482e-01\n [406] 1.226923e-01 1.222393e-01 1.217891e-01 1.213416e-01 1.208969e-01 1.204548e-01 1.200155e-01 1.195788e-01 1.191448e-01\n [415] 1.187133e-01",
        " 1.182845e-01 1.178583e-01 1.174346e-01 1.170134e-01 1.165947e-01 1.161786e-01 1.157649e-01 1.153536e-01\n [424] 1.149448e-01 1.145384e-01 1.141344e-01 1.137328e-01 1.133335e-01 1.129365e-01 1.125419e-01 1.121495e-01 1.117594e-01\n [433] 1.113716e-01 1.109860e-01 1.106026e-01 1.102214e-01 1.098425e-01 1.094656e-01 1.090910e-01 1.087184e-01 1.083480e-01\n [442] 1.079797e-01 1.076135e-01 1.072493e-01 1.068872e-01 1.065271e-01 1.061690e-01 1.058129e-01 1.054588e-01 1.051067e-01\n [451] 1.047566e-01 1.044083e-01 1.040620e-01",
        " 1.037177e-01 1.033752e-01 1.030346e-01 1.026958e-01 1.023589e-01 1.020239e-01\n [460] 1.016906e-01 1.013592e-01 1.010296e-01 1.007018e-01 1.003757e-01 1.000514e-01 9.972879e-02 9.940795e-02 9.908883e-02\n [469] 9.877140e-02 9.845567e-02 9.814162e-02 9.782923e-02 9.751850e-02 9.720941e-02 9.690194e-02 9.659610e-02 9.629186e-02\n [478] 9.598921e-02 9.568815e-02 9.538866e-02 9.509072e-02 9.479434e-02 9.449949e-02 9.420616e-02 9.391435e-02 9.362404e-02\n [487] 9.333523e-02 9.304790e-02 9.276203e-02 9.247763e-02 9.219468e-02",
        " 9.191317e-02 9.163309e-02 9.135443e-02 9.107718e-02\n [496] 9.080133e-02 9.052687e-02 9.025378e-02 8.998207e-02 8.971172e-02 8.944272e-02 8.917506e-02 8.890873e-02 8.864373e-02\n [505] 8.838004e-02 8.811766e-02 8.785657e-02 8.759676e-02 8.733824e-02 8.708098e-02 8.682499e-02 8.657025e-02 8.631675e-02\n [514] 8.606448e-02 8.581344e-02 8.556362e-02 8.531501e-02 8.506760e-02 8.482139e-02 8.457635e-02 8.433250e-02 8.408982e-02\n [523] 8.384830e-02 8.360793e-02 8.336871e-02 8.313062e-02 8.289367e-02 8.265784e-02 8.242313e-02",
        " 8.218953e-02 8.195703e-02\n [532] 8.172562e-02 8.149530e-02 8.126606e-02 8.103789e-02 8.081079e-02 8.058474e-02 8.035975e-02 8.013580e-02 7.991289e-02\n [541] 7.969102e-02 7.947016e-02 7.925033e-02 7.903151e-02 7.881369e-02 7.859687e-02 7.838104e-02 7.816620e-02 7.795234e-02\n [550] 7.773945e-02 7.752753e-02 7.731657e-02 7.710657e-02 7.689751e-02 7.668940e-02 7.648223e-02 7.627598e-02 7.607066e-02\n [559] 7.586626e-02 7.566278e-02 7.546020e-02 7.525853e-02 7.505775e-02 7.485786e-02 7.465886e-02 7.446074e-02 7.426349e-02",
        "\n [568] 7.406711e-02 7.387160e-02 7.367694e-02 7.348314e-02 7.329019e-02 7.309808e-02 7.290681e-02 7.271637e-02 7.252675e-02\n [577] 7.233796e-02 7.214999e-02 7.196283e-02 7.177648e-02 7.159093e-02 7.140618e-02 7.122222e-02 7.103905e-02 7.085667e-02\n [586] 7.067506e-02 7.049423e-02 7.031417e-02 7.013487e-02 6.995634e-02 6.977856e-02 6.960153e-02 6.942525e-02 6.924971e-02\n [595] 6.907491e-02 6.890085e-02 6.872751e-02 6.855490e-02 6.838301e-02 6.821184e-02 6.804138e-02 6.787163e-02 6.770259e-02\n [604] 6.753424e-02",
        " 6.736659e-02 6.719964e-02 6.703337e-02 6.686779e-02 6.670289e-02 6.653866e-02 6.637511e-02 6.621223e-02\n [613] 6.605001e-02 6.588845e-02 6.572755e-02 6.556730e-02 6.540771e-02 6.524876e-02 6.509045e-02 6.493278e-02 6.477575e-02\n [622] 6.461935e-02 6.446358e-02 6.430843e-02 6.415391e-02 6.400000e-02 6.384671e-02 6.369402e-02 6.354195e-02 6.339048e-02\n [631] 6.323961e-02 6.308934e-02 6.293966e-02 6.279057e-02 6.264207e-02 6.249416e-02 6.234682e-02 6.220007e-02 6.205389e-02\n [640] 6.190828e-02 6.176324e-02 6.161876e-02",
        " 6.147485e-02 6.133149e-02 6.118870e-02 6.104645e-02 6.090476e-02 6.076361e-02\n [649] 6.062301e-02 6.048295e-02 6.034343e-02 6.020444e-02 6.006599e-02 5.992806e-02 5.979066e-02 5.965379e-02 5.951744e-02\n [658] 5.938161e-02 5.924629e-02 5.911149e-02 5.897719e-02 5.884341e-02 5.871013e-02 5.857735e-02 5.844507e-02 5.831329e-02\n [667] 5.818200e-02 5.805121e-02 5.792090e-02 5.779108e-02 5.766175e-02 5.753289e-02 5.740452e-02 5.727662e-02 5.714920e-02\n [676] 5.702225e-02 5.689577e-02 5.676975e-02 5.664420e-02 5.651911e-02",
        " 5.639448e-02 5.627031e-02 5.614660e-02 5.602333e-02\n [685] 5.590052e-02 5.577815e-02 5.565624e-02 5.553476e-02 5.541372e-02 5.529313e-02 5.517297e-02 5.505325e-02 5.493395e-02\n [694] 5.481509e-02 5.469666e-02 5.457865e-02 5.446107e-02 5.434390e-02 5.422716e-02 5.411084e-02 5.399492e-02 5.387943e-02\n [703] 5.376434e-02 5.364966e-02 5.353539e-02 5.342153e-02 5.330807e-02 5.319501e-02 5.308235e-02 5.297008e-02 5.285821e-02\n [712] 5.274674e-02 5.263565e-02 5.252496e-02 5.241465e-02 5.230473e-02 5.219519e-02 5.208603e-02",
        " 5.197725e-02 5.186886e-02\n [721] 5.176083e-02 5.165318e-02 5.154591e-02 5.143900e-02 5.133247e-02 5.122630e-02 5.112050e-02 5.101506e-02 5.090998e-02\n [730] 5.080526e-02 5.070090e-02 5.059690e-02 5.049326e-02 5.038996e-02 5.028702e-02 5.018443e-02 5.008219e-02 4.998029e-02\n [739] 4.987874e-02 4.977753e-02 4.967666e-02 4.957614e-02 4.947595e-02 4.937610e-02 4.927658e-02 4.917740e-02 4.907855e-02\n [748] 4.898004e-02 4.888185e-02 4.878398e-02 4.868645e-02 4.858924e-02 4.849235e-02 4.839578e-02 4.829954e-02 4.820361e-02",
        "\n [757] 4.810800e-02 4.801271e-02 4.791773e-02 4.782306e-02 4.772870e-02 4.763465e-02 4.754092e-02 4.744748e-02 4.735436e-02\n [766] 4.726154e-02 4.716902e-02 4.707680e-02 4.698489e-02 4.689327e-02 4.680195e-02 4.671092e-02 4.662019e-02 4.652975e-02\n [775] 4.643961e-02 4.634976e-02 4.626019e-02 4.617091e-02 4.608192e-02 4.599322e-02 4.590480e-02 4.581666e-02 4.572881e-02\n [784] 4.564123e-02 4.555394e-02 4.546692e-02 4.538018e-02 4.529371e-02 4.520752e-02 4.512160e-02 4.503595e-02 4.495058e-02\n [793] 4.486547e-02",
        " 4.478063e-02 4.469606e-02 4.461175e-02 4.452771e-02 4.444394e-02 4.436042e-02 4.427717e-02 4.419417e-02\n [802] 4.411144e-02 4.402896e-02 4.394674e-02 4.386478e-02 4.378307e-02 4.370161e-02 4.362041e-02 4.353945e-02 4.345875e-02\n [811] 4.337829e-02 4.329809e-02 4.321813e-02 4.313841e-02 4.305895e-02 4.297972e-02 4.290074e-02 4.282200e-02 4.274350e-02\n [820] 4.266524e-02 4.258721e-02 4.250943e-02 4.243188e-02 4.235457e-02 4.227749e-02 4.220064e-02 4.212403e-02 4.204765e-02\n [829] 4.197150e-02 4.189558e-02 4.181989e-02",
        " 4.174442e-02 4.166919e-02 4.159417e-02 4.151939e-02 4.144482e-02 4.137048e-02\n [838] 4.129636e-02 4.122247e-02 4.114879e-02 4.107533e-02 4.100209e-02 4.092907e-02 4.085626e-02 4.078367e-02 4.071130e-02\n [847] 4.063913e-02 4.056719e-02 4.049545e-02 4.042392e-02 4.035261e-02 4.028150e-02 4.021061e-02 4.013992e-02 4.006943e-02\n [856] 3.999916e-02 3.992908e-02 3.985922e-02 3.978955e-02 3.972009e-02 3.965083e-02 3.958178e-02 3.951292e-02 3.944426e-02\n [865] 3.937580e-02 3.930754e-02 3.923947e-02 3.917160e-02 3.910393e-02",
        " 3.903645e-02 3.896917e-02 3.890208e-02 3.883518e-02\n [874] 3.876847e-02 3.870195e-02 3.863562e-02 3.856949e-02 3.850354e-02 3.843777e-02 3.837220e-02 3.830681e-02 3.824161e-02\n [883] 3.817659e-02 3.811175e-02 3.804710e-02 3.798264e-02 3.791835e-02 3.785424e-02 3.779032e-02 3.772657e-02 3.766301e-02\n [892] 3.759962e-02 3.753641e-02 3.747338e-02 3.741052e-02 3.734784e-02 3.728533e-02 3.722300e-02 3.716084e-02 3.709885e-02\n [901] 3.703704e-02 3.697539e-02 3.691392e-02 3.685262e-02 3.679149e-02 3.673052e-02 3.666973e-02",
        " 3.660910e-02 3.654864e-02\n [910] 3.648835e-02 3.642822e-02 3.636825e-02 3.630845e-02 3.624882e-02 3.618934e-02 3.613003e-02 3.607088e-02 3.601190e-02\n [919] 3.595307e-02 3.589440e-02 3.583590e-02 3.577755e-02 3.571936e-02 3.566132e-02 3.560345e-02 3.554573e-02 3.548816e-02\n [928] 3.543075e-02 3.537350e-02 3.531640e-02 3.525945e-02 3.520266e-02 3.514602e-02 3.508953e-02 3.503319e-02 3.497700e-02\n [937] 3.492096e-02 3.486508e-02 3.480934e-02 3.475375e-02 3.469830e-02 3.464301e-02 3.458786e-02 3.453285e-02 3.447800e-02",
        "\n [946] 3.442328e-02 3.436872e-02 3.431429e-02 3.426001e-02 3.420587e-02 3.415188e-02 3.409802e-02 3.404431e-02 3.399074e-02\n [955] 3.393731e-02 3.388402e-02 3.383087e-02 3.377786e-02 3.372498e-02 3.367225e-02 3.361965e-02 3.356718e-02 3.351486e-02\n [964] 3.346267e-02 3.341061e-02 3.335869e-02 3.330691e-02 3.325526e-02 3.320374e-02 3.315235e-02 3.310110e-02 3.304998e-02\n [973] 3.299899e-02 3.294813e-02 3.289740e-02 3.284680e-02 3.279633e-02 3.274599e-02 3.269578e-02 3.264570e-02 3.259574e-02\n [982] 3.254592e-02",
        " 3.249621e-02 3.244664e-02 3.239719e-02 3.234787e-02 3.229867e-02 3.224960e-02 3.220065e-02 3.215182e-02\n [991] 3.210312e-02 3.205454e-02 3.200608e-02 3.195775e-02 3.190953e-02 3.186144e-02 3.181347e-02 3.176561e-02 3.171788e-02\n[1000] 3.167027e-02 3.162278e-02\n",
        "> ",
        "plot(x,pl(x, .5))",
        "> ",
        "dt = 0.1",
        "> ",
        "B = .5",
        "> ",
        "x = seq(0,10,dt)",
        "> ",
        "plot(x,pl(x, B))",
        "> ",
        "plot(x,pl(x, B), type='l')",
        "> ",
        "sum(pl(x))*dt",
        "Error in pl(x) : argument \"b\" is missing, with no default\n",
        "> ",
        "sum(pl(x,B))*dt",
        "[1] Inf\n",
        "> ",
        "B = .1",
        "> ",
        "x = seq(0,10,dt)",
        "> ",
        "plot(x,pl(x, B), type='l')",
        "> ",
        "sum(pl(x,B))*dt",
        "[1] Inf\n",
        "> ",
        "pl(x,B)",
        "  [1]         Inf 12.58925412  5.87309472  3.75981624  2.73989557  2.14354693  1.75401630  1.48044459  1.27820648  1.12287972\n [11]  1.00000000  0.90046751  0.81827754  0.74931135  0.69065182  0.64017633  0.59630441  0.55783555  0.52384191  0.49359533\n [21]  0.46651650  0.44213895  0.42008295  0.40003628  0.38173997  0.36497741  0.34956611  0.33535120  0.32220047  0.31000036\n [31]  0.29865282  0.28807272  0.27818584  0.26892716  0.26023949  0.25207232  0.24438089  0.23712541  0.23027036  0.22378395\n [41]  0.21763764",
        "  0.21180576  0.20626511  0.20099474  0.19597562  0.19119047  0.18662352  0.18226042  0.17808799  0.17409420\n [51]  0.17026798  0.16659916  0.16307836  0.15969692  0.15644686  0.15332079  0.15031183  0.14741364  0.14462028  0.14192627\n [61]  0.13932647  0.13681609  0.13439068  0.13204604  0.12977828  0.12758373  0.12545896  0.12340073  0.12140601  0.11947196\n [71]  0.11759589  0.11577527  0.11400772  0.11229098  0.11062292  0.10900153  0.10742492  0.10589128  0.10439890  0.10294617\n [81]  0.10153155  0.10015358",
        "  0.09881088  0.09750213  0.09622608  0.09498153  0.09376736  0.09258248  0.09142586  0.09029652\n [91]  0.08919351  0.08811594  0.08706295  0.08603373  0.08502749  0.08404348  0.08308099  0.08213932  0.08121782  0.08031585\n[101]  0.07943282\n",
        "> ",
        "pl <- function(x,b){",
        "+ ",
        "  (x+1e-3)^(-1-b)",
        "+ ",
        "}",
        "> ",
        "dt = 0.1",
        "> ",
        "B = .1",
        "> ",
        "x = seq(0,10,dt)",
        "> ",
        "plot(x,pl(x, B), type='l')",
        "> ",
        "sum(pl(x,B))*dt",
        "[1] 204.8906\n",
        "> ",
        "x = seq(0,100,dt)",
        "> ",
        "plot(x,pl(x, B), type='l')",
        "> ",
        "sum(pl(x,B))*dt",
        "[1] 206.5206\n\nRestarting R session...\n\n",
        "> ",
        "library(bootha)",
        "> ",
        "library(bootha)",
        "> ",
        "library(misc)",
        "> ",
        "misc::clean_up()",
        "\f",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "dji <- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/DJI.csv\")",
        "> ",
        "dji$Date = as.Date(dji$Date)",
        "> ",
        "dji$log.return = c(NA,diff(log(dji$Close)))",
        "> ",
        "",
        "> ",
        "date.from = as.Date(\"1994-01-01\")",
        "> ",
        "date.to = as.Date(\"2010-12-31\")",
        "> ",
        "",
        "> ",
        "idx.dji = dji$Date>date.from & dji$Date < date.to",
        "> ",
        "idx = c(1,5,7,8)",
        "> ",
        "dji.tmp = dji[idx.dji,idx]",
        "> ",
        "pfc = dji.tmp",
        "> ",
        "names(pfc) = c(\"date\", \"close.dji\", \"volume.dji\", \"log.return.dji\")",
        "> ",
        "",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.01,.99), na.rm = TRUE)",
        "> ",
        "qts = quantile(pfc$log.return, probs = c(.1,.9), na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "idx = which(pfc$log.return < qts[1] | pfc$log.return > qts[2])",
        "> ",
        "",
        "> ",
        "x = as.numeric(pfc$date[idx])",
        "> ",
        "x = x-min(x)+1",
        "> ",
        "y = pfc$log.return[idx]",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mu = 0.018",
        "> ",
        "n = .74",
        "> ",
        "d = 0.021",
        "> ",
        "pp = as.numeric(x[y<0])",
        "> ",
        "",
        "> ",
        "pars = c(mu,n,d)",
        "> ",
        "Tmax = max(x)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "# ui0 = diag(c(1,-1,1))",
        "> ",
        "# ci0 = c(0,-1,0)",
        "> ",
        "(res = mle(pp, Tmax, pars))",
        "        mu          n          B \n0.01430169 0.80027486 0.01917762 \n",
        "> ",
        "",
        "> ",
        "log_lik(pp, Tmax, pars)",
        "[1] -1477.65\n",
        "> ",
        "log_lik(pp, Tmax, res)",
        "[1] -1477.143\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n<1 and B>0:",
        "> ",
        "ui0 = diag(c(1,-1,1))",
        "> ",
        "ci0 = c(0,-1,0)",
        "> ",
        "",
        "> ",
        "# These constraints ensures mu>0, n>0 and B>0:",
        "> ",
        "# ui0 = diag(c(1,1,1))",
        "> ",
        "# ci0 = c(0,0,0)",
        "> ",
        "# for(b in 1:length(boot)){",
        "> ",
        "#   print(mle(boot[[b]], Tmax, pars))",
        "> ",
        "# }",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "booter <- function(B, type, parametric, dt=1, ncores=8){",
        "+ ",
        "  tmp =  bootstrap_hawkes(pp, pars, Tmax, B, type, parametric,  dt, ncores)",
        "+ ",
        "  res = lapply(tmp, function(pp) mle(pp, Tmax, pars))",
        "+ ",
        "  res = matrix(unlist(res),nc=3, byrow=TRUE)",
        "+ ",
        "  colnames(res) = c(\"mu\",\"n\",\"B\")",
        "+ ",
        "  return(res)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "datalib = \"~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/Source/R/packages/bootha/data/\"",
        "> ",
        "fn = paste0(datalib,\"boot_embrechts.Rda\")",
        "> ",
        "",
        "> ",
        "B = 399",
        "> ",
        "boot = list()",
        "> ",
        "booter(5, 'rib', parametric=TRUE)",
        "\n",
        "> ",
        "booter(1, 'rib', parametric=TRUE)",
        "\nRestarting R session...\n\n"
    ]
}